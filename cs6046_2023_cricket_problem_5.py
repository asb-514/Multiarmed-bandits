# -*- coding: utf-8 -*-
"""CS6046-2023-Cricket-Problem-5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qRw-ldPksMPOa90iUOzr_stILwmLvxSF
"""

import numpy as np
import time
# Students will submit their files with their team-name.py
# Student have to use the Team as their parent class

"""Recent Version of the Code"""

class Agent:
  def __init__(self,num_balls,num_matches):
      pass
  def get_batting_order(self):
    return np.array([0,1,2,3])

  def get_action(self,wicket,runs_scored):
    action = np.random.randint(0,6)
    return action

class Environment:
  def __init__(self,num_balls,agent):
    self.num_balls = num_balls
    self.agent = agent
    self.__run_time = 0
    self.__total_runs = 0
    self.__total_wickets = 0
    self.__runs_scored = 0
    self.__start_time = 0
    self.__end_time = 0
    self.__p_out =np.random.uniform(0,1,(4,6))
    self.__p_run =np.random.uniform(0,1,(4,6))
    self.__action_runs_map = np.array([0,1,2,3,4,6])
    self.__wickets_left = 4
    self.__wicket = 0
    self.__runs_scored = 0
    self.__start_time = 0
    self.__end_time = 0
    self.__batting_order = np.array([0,1,2,3])
    self.__current_batter = self.__batting_order[self.__wickets_left-1]


  def __get_action(self):
    self.__start_time      = time. time()
    action          = self.agent.get_action(self.__wicket, self.__runs_scored)
    self.__end_time        = time. time()
    self.__run_time   = self.__run_time + self.__end_time - self.__start_time
    return action


  def __get_outcome(self, action):
    self.__current_batter = self.__batting_order[self.__wickets_left-1]
    pout = self.__p_out[self.__current_batter][action]
    prun = self.__p_run[self.__current_batter][action]
    wicket = np.random.choice(2,1,p=[1-pout,pout])[0]
    runs = 0
    if(wicket==0):
      runs = self.__action_runs_map[action]*np.random.choice(2,1,p=[1-prun,prun])[0]
    return wicket, runs


  def innings(self):
    self.__wickets_left = 4
    self.__runs_scored = 0
    self.__total_runs = 0
    self.__total_wickets = 0
    self.__run_time = 0
    self.__start_time = 0
    self.__end_time = 0


    self.__batting_order = self.agent.get_batting_order()

    for ball in range(self.num_balls):
      if (self.__wickets_left > 0 ) :
        action = self.__get_action()
        self.__wicket, self.__runs_scored   = self.__get_outcome(action)
        self.__total_runs     = self.__total_runs + self.__runs_scored
        if (self.__wicket > 0 ):
          self.__wickets_left = self.__wickets_left -1
        self.__total_wickets  = self.__total_wickets + self.__wicket
        if (self.__wickets_left == 0):
          self.__get_action()
    return self.__total_runs, self.__total_wickets, self.__run_time

num_matches = 10
num_balls = 60
agent = Agent(num_balls,num_matches)
environment = Environment(100,agent)
score = np.zeros((num_matches,1))
run_time = np.zeros((num_matches,1))
wicket = np.zeros((num_matches,1))
for i in range(num_matches):
  score[i],wicket[i],run_time[i] = environment.innings()

